// Code generated by protoc-gen-go.
// source: gauge/spec.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	gauge/spec.proto

It has these top-level messages:
	ProtoSpec
	ProtoItem
	ProtoHeading
	ProtoScenario
	ProtoStep
	ProtoConcept
	ProtoTags
	Fragment
	Parameter
	Argument
	ProtoComment
	ProtoTable
	ProtoTableRow
	ProtoStepExecutionResult
*/
package main

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type ProtoItem_ItemType int32

const (
	ProtoItem_Heading  ProtoItem_ItemType = 1
	ProtoItem_Step     ProtoItem_ItemType = 2
	ProtoItem_Concept  ProtoItem_ItemType = 4
	ProtoItem_Scenario ProtoItem_ItemType = 5
	ProtoItem_Comment  ProtoItem_ItemType = 6
	ProtoItem_Table    ProtoItem_ItemType = 7
	ProtoItem_Tags     ProtoItem_ItemType = 8
)

var ProtoItem_ItemType_name = map[int32]string{
	1: "Heading",
	2: "Step",
	4: "Concept",
	5: "Scenario",
	6: "Comment",
	7: "Table",
	8: "Tags",
}
var ProtoItem_ItemType_value = map[string]int32{
	"Heading":  1,
	"Step":     2,
	"Concept":  4,
	"Scenario": 5,
	"Comment":  6,
	"Table":    7,
	"Tags":     8,
}

func (x ProtoItem_ItemType) Enum() *ProtoItem_ItemType {
	p := new(ProtoItem_ItemType)
	*p = x
	return p
}
func (x ProtoItem_ItemType) String() string {
	return proto.EnumName(ProtoItem_ItemType_name, int32(x))
}
func (x *ProtoItem_ItemType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProtoItem_ItemType_value, data, "ProtoItem_ItemType")
	if err != nil {
		return err
	}
	*x = ProtoItem_ItemType(value)
	return nil
}

type ProtoHeading_HeadingType int32

const (
	ProtoHeading_Spec     ProtoHeading_HeadingType = 1
	ProtoHeading_Scenario ProtoHeading_HeadingType = 2
)

var ProtoHeading_HeadingType_name = map[int32]string{
	1: "Spec",
	2: "Scenario",
}
var ProtoHeading_HeadingType_value = map[string]int32{
	"Spec":     1,
	"Scenario": 2,
}

func (x ProtoHeading_HeadingType) Enum() *ProtoHeading_HeadingType {
	p := new(ProtoHeading_HeadingType)
	*p = x
	return p
}
func (x ProtoHeading_HeadingType) String() string {
	return proto.EnumName(ProtoHeading_HeadingType_name, int32(x))
}
func (x *ProtoHeading_HeadingType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProtoHeading_HeadingType_value, data, "ProtoHeading_HeadingType")
	if err != nil {
		return err
	}
	*x = ProtoHeading_HeadingType(value)
	return nil
}

type Fragment_FragmentType int32

const (
	Fragment_Text      Fragment_FragmentType = 1
	Fragment_Parameter Fragment_FragmentType = 2
)

var Fragment_FragmentType_name = map[int32]string{
	1: "Text",
	2: "Parameter",
}
var Fragment_FragmentType_value = map[string]int32{
	"Text":      1,
	"Parameter": 2,
}

func (x Fragment_FragmentType) Enum() *Fragment_FragmentType {
	p := new(Fragment_FragmentType)
	*p = x
	return p
}
func (x Fragment_FragmentType) String() string {
	return proto.EnumName(Fragment_FragmentType_name, int32(x))
}
func (x *Fragment_FragmentType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fragment_FragmentType_value, data, "Fragment_FragmentType")
	if err != nil {
		return err
	}
	*x = Fragment_FragmentType(value)
	return nil
}

type Parameter_ParameterType int32

const (
	Parameter_Static  Parameter_ParameterType = 1
	Parameter_Dynamic Parameter_ParameterType = 2
	Parameter_Special Parameter_ParameterType = 3
	Parameter_Table   Parameter_ParameterType = 4
)

var Parameter_ParameterType_name = map[int32]string{
	1: "Static",
	2: "Dynamic",
	3: "Special",
	4: "Table",
}
var Parameter_ParameterType_value = map[string]int32{
	"Static":  1,
	"Dynamic": 2,
	"Special": 3,
	"Table":   4,
}

func (x Parameter_ParameterType) Enum() *Parameter_ParameterType {
	p := new(Parameter_ParameterType)
	*p = x
	return p
}
func (x Parameter_ParameterType) String() string {
	return proto.EnumName(Parameter_ParameterType_name, int32(x))
}
func (x *Parameter_ParameterType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Parameter_ParameterType_value, data, "Parameter_ParameterType")
	if err != nil {
		return err
	}
	*x = Parameter_ParameterType(value)
	return nil
}

type ProtoSpec struct {
	Items            []*ProtoItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ProtoSpec) Reset()         { *m = ProtoSpec{} }
func (m *ProtoSpec) String() string { return proto.CompactTextString(m) }
func (*ProtoSpec) ProtoMessage()    {}

func (m *ProtoSpec) GetItems() []*ProtoItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ProtoItem struct {
	ItemType         *ProtoItem_ItemType `protobuf:"varint,1,req,name=itemType,enum=main.ProtoItem_ItemType" json:"itemType,omitempty"`
	Heading          *ProtoHeading       `protobuf:"bytes,2,opt,name=heading" json:"heading,omitempty"`
	Step             *ProtoStep          `protobuf:"bytes,3,opt,name=step" json:"step,omitempty"`
	Concept          *ProtoConcept       `protobuf:"bytes,4,opt,name=concept" json:"concept,omitempty"`
	Scenario         *ProtoScenario      `protobuf:"bytes,5,opt,name=scenario" json:"scenario,omitempty"`
	Comment          *ProtoComment       `protobuf:"bytes,6,opt,name=comment" json:"comment,omitempty"`
	Table            *ProtoTable         `protobuf:"bytes,7,opt,name=table" json:"table,omitempty"`
	Tags             *ProtoTags          `protobuf:"bytes,8,opt,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *ProtoItem) Reset()         { *m = ProtoItem{} }
func (m *ProtoItem) String() string { return proto.CompactTextString(m) }
func (*ProtoItem) ProtoMessage()    {}

func (m *ProtoItem) GetItemType() ProtoItem_ItemType {
	if m != nil && m.ItemType != nil {
		return *m.ItemType
	}
	return ProtoItem_Heading
}

func (m *ProtoItem) GetHeading() *ProtoHeading {
	if m != nil {
		return m.Heading
	}
	return nil
}

func (m *ProtoItem) GetStep() *ProtoStep {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *ProtoItem) GetConcept() *ProtoConcept {
	if m != nil {
		return m.Concept
	}
	return nil
}

func (m *ProtoItem) GetScenario() *ProtoScenario {
	if m != nil {
		return m.Scenario
	}
	return nil
}

func (m *ProtoItem) GetComment() *ProtoComment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *ProtoItem) GetTable() *ProtoTable {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *ProtoItem) GetTags() *ProtoTags {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ProtoHeading struct {
	HeadingType      *ProtoHeading_HeadingType `protobuf:"varint,1,req,name=headingType,enum=main.ProtoHeading_HeadingType" json:"headingType,omitempty"`
	Text             *string                   `protobuf:"bytes,2,req,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ProtoHeading) Reset()         { *m = ProtoHeading{} }
func (m *ProtoHeading) String() string { return proto.CompactTextString(m) }
func (*ProtoHeading) ProtoMessage()    {}

func (m *ProtoHeading) GetHeadingType() ProtoHeading_HeadingType {
	if m != nil && m.HeadingType != nil {
		return *m.HeadingType
	}
	return ProtoHeading_Spec
}

func (m *ProtoHeading) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type ProtoScenario struct {
	ScenarioItems    []*ProtoItem `protobuf:"bytes,1,rep,name=scenarioItems" json:"scenarioItems,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ProtoScenario) Reset()         { *m = ProtoScenario{} }
func (m *ProtoScenario) String() string { return proto.CompactTextString(m) }
func (*ProtoScenario) ProtoMessage()    {}

func (m *ProtoScenario) GetScenarioItems() []*ProtoItem {
	if m != nil {
		return m.ScenarioItems
	}
	return nil
}

type ProtoStep struct {
	Text             *string                     `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
	Parameters       []*Parameter                `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty"`
	Fragments        []*Fragment                 `protobuf:"bytes,3,rep,name=fragments" json:"fragments,omitempty"`
	Result           []*ProtoStepExecutionResult `protobuf:"bytes,4,rep,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *ProtoStep) Reset()         { *m = ProtoStep{} }
func (m *ProtoStep) String() string { return proto.CompactTextString(m) }
func (*ProtoStep) ProtoMessage()    {}

func (m *ProtoStep) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *ProtoStep) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ProtoStep) GetFragments() []*Fragment {
	if m != nil {
		return m.Fragments
	}
	return nil
}

func (m *ProtoStep) GetResult() []*ProtoStepExecutionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type ProtoConcept struct {
	ConceptStep      *ProtoStep   `protobuf:"bytes,1,req,name=conceptStep" json:"conceptStep,omitempty"`
	Steps            []*ProtoStep `protobuf:"bytes,2,rep,name=steps" json:"steps,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ProtoConcept) Reset()         { *m = ProtoConcept{} }
func (m *ProtoConcept) String() string { return proto.CompactTextString(m) }
func (*ProtoConcept) ProtoMessage()    {}

func (m *ProtoConcept) GetConceptStep() *ProtoStep {
	if m != nil {
		return m.ConceptStep
	}
	return nil
}

func (m *ProtoConcept) GetSteps() []*ProtoStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

type ProtoTags struct {
	Tags             []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProtoTags) Reset()         { *m = ProtoTags{} }
func (m *ProtoTags) String() string { return proto.CompactTextString(m) }
func (*ProtoTags) ProtoMessage()    {}

func (m *ProtoTags) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Fragment struct {
	FragmentType     *Fragment_FragmentType `protobuf:"varint,1,req,name=fragmentType,enum=main.Fragment_FragmentType" json:"fragmentType,omitempty"`
	Text             *string                `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Parameter        *Parameter             `protobuf:"bytes,3,opt,name=parameter" json:"parameter,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *Fragment) Reset()         { *m = Fragment{} }
func (m *Fragment) String() string { return proto.CompactTextString(m) }
func (*Fragment) ProtoMessage()    {}

func (m *Fragment) GetFragmentType() Fragment_FragmentType {
	if m != nil && m.FragmentType != nil {
		return *m.FragmentType
	}
	return Fragment_Text
}

func (m *Fragment) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *Fragment) GetParameter() *Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

type Parameter struct {
	ParameterType    *Parameter_ParameterType `protobuf:"varint,1,req,name=parameterType,enum=main.Parameter_ParameterType" json:"parameterType,omitempty"`
	Value            *string                  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Table            *ProtoTable              `protobuf:"bytes,3,opt,name=table" json:"table,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *Parameter) Reset()         { *m = Parameter{} }
func (m *Parameter) String() string { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()    {}

func (m *Parameter) GetParameterType() Parameter_ParameterType {
	if m != nil && m.ParameterType != nil {
		return *m.ParameterType
	}
	return Parameter_Static
}

func (m *Parameter) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Parameter) GetTable() *ProtoTable {
	if m != nil {
		return m.Table
	}
	return nil
}

type Argument struct {
	Type             *string     `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Value            *string     `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Table            *ProtoTable `protobuf:"bytes,3,opt,name=table" json:"table,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Argument) Reset()         { *m = Argument{} }
func (m *Argument) String() string { return proto.CompactTextString(m) }
func (*Argument) ProtoMessage()    {}

func (m *Argument) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Argument) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Argument) GetTable() *ProtoTable {
	if m != nil {
		return m.Table
	}
	return nil
}

type ProtoComment struct {
	Text             *string `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProtoComment) Reset()         { *m = ProtoComment{} }
func (m *ProtoComment) String() string { return proto.CompactTextString(m) }
func (*ProtoComment) ProtoMessage()    {}

func (m *ProtoComment) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type ProtoTable struct {
	Headers          *ProtoTableRow   `protobuf:"bytes,1,req,name=headers" json:"headers,omitempty"`
	Rows             []*ProtoTableRow `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *ProtoTable) Reset()         { *m = ProtoTable{} }
func (m *ProtoTable) String() string { return proto.CompactTextString(m) }
func (*ProtoTable) ProtoMessage()    {}

func (m *ProtoTable) GetHeaders() *ProtoTableRow {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ProtoTable) GetRows() []*ProtoTableRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

type ProtoTableRow struct {
	Cells            []string `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProtoTableRow) Reset()         { *m = ProtoTableRow{} }
func (m *ProtoTableRow) String() string { return proto.CompactTextString(m) }
func (*ProtoTableRow) ProtoMessage()    {}

func (m *ProtoTableRow) GetCells() []string {
	if m != nil {
		return m.Cells
	}
	return nil
}

type ProtoStepExecutionResult struct {
	IsPassed         *bool       `protobuf:"varint,1,req,name=isPassed" json:"isPassed,omitempty"`
	StackTrace       *string     `protobuf:"bytes,2,opt,name=stackTrace" json:"stackTrace,omitempty"`
	Argument         []*Argument `protobuf:"bytes,3,rep,name=argument" json:"argument,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ProtoStepExecutionResult) Reset()         { *m = ProtoStepExecutionResult{} }
func (m *ProtoStepExecutionResult) String() string { return proto.CompactTextString(m) }
func (*ProtoStepExecutionResult) ProtoMessage()    {}

func (m *ProtoStepExecutionResult) GetIsPassed() bool {
	if m != nil && m.IsPassed != nil {
		return *m.IsPassed
	}
	return false
}

func (m *ProtoStepExecutionResult) GetStackTrace() string {
	if m != nil && m.StackTrace != nil {
		return *m.StackTrace
	}
	return ""
}

func (m *ProtoStepExecutionResult) GetArgument() []*Argument {
	if m != nil {
		return m.Argument
	}
	return nil
}

func init() {
	proto.RegisterEnum("main.ProtoItem_ItemType", ProtoItem_ItemType_name, ProtoItem_ItemType_value)
	proto.RegisterEnum("main.ProtoHeading_HeadingType", ProtoHeading_HeadingType_name, ProtoHeading_HeadingType_value)
	proto.RegisterEnum("main.Fragment_FragmentType", Fragment_FragmentType_name, Fragment_FragmentType_value)
	proto.RegisterEnum("main.Parameter_ParameterType", Parameter_ParameterType_name, Parameter_ParameterType_value)
}
