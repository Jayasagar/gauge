package main;

message ProtoSpec {
    required string specHeading = 1;
    repeated ProtoItem items = 2;
    required bool isTableDriven = 3;
}

message ProtoItem {
    enum ItemType {
        Step = 1;
        Concept = 2;
        Scenario = 3;
        TableDrivenScenario = 4;
        Comment = 5;
        Table = 6;
        Tags = 7;
    }
    required ItemType itemType = 1;
    optional ProtoStep step = 2;
    optional ProtoConcept concept = 3;
    optional ProtoScenario scenario = 4;
    optional ProtoTableDrivenScenario tableDrivenScenario = 5;
    optional ProtoComment comment = 6;
    optional ProtoTable table = 7;
    optional ProtoTags tags = 8;
}


message ProtoScenario {
    required string scenarioHeading = 1;
    repeated ProtoItem scenarioItems = 2;
    optional ProtoHookFailure preHookFailure = 3;
    optional ProtoHookFailure postHookFailure = 4;
}

message ProtoTableDrivenScenario {
    repeated ProtoScenario scenarios = 1;
}

message ProtoStep {
    required string text = 1;
    repeated Parameter parameters = 2;
    repeated Fragment fragments = 3;
    repeated ProtoStepExecutionResult result = 4;
    optional ProtoHookFailure preHookFailure = 5;
    optional ProtoHookFailure postHookFailure = 6;
}

message ProtoConcept {
    required ProtoStep conceptStep = 1;
    repeated ProtoStep steps = 2;
}

message ProtoTags {
    repeated string tags = 1;
}

message Fragment {
    enum FragmentType {
        Text = 1;
        Parameter = 2;
    }
    required FragmentType fragmentType = 1;
    optional string text = 2;
    optional Parameter parameter = 3;
}

message Parameter {
    enum ParameterType {
        Static = 1;
        Dynamic = 2;
        Special = 3;
        Table = 4;
    }
    required ParameterType parameterType = 1;
    optional string value = 2;
    optional ProtoTable table = 3;
}

message Argument {
    required string type = 1;
    optional string value = 2;
    optional ProtoTable table = 3;
}

message ProtoComment {
    required string text = 1;
}

message ProtoTable {
    required ProtoTableRow headers = 1;
    repeated ProtoTableRow rows = 2;
}

message ProtoTableRow {
    repeated string cells = 1;
}

message ProtoStepExecutionResult {
    required bool isPassed = 1;
    optional string stackTrace = 2;
    repeated Argument argument = 3;
}

message SpecExecStatus {
    repeated ProtoItem item = 1;
    optional ProtoHookFailure preHookFailure = 2;
    optional ProtoHookFailure postHookFailure = 3;
}

message ProtoHookFailure {
    required string stackTrace = 1;
    required string errorMessage = 2;
    optional bytes screenShot = 3;
}