#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

module Main
  # forward declarations
  class ProtoSpec < ::ProtocolBuffers::Message; end
  class ProtoItem < ::ProtocolBuffers::Message; end
  class ProtoScenario < ::ProtocolBuffers::Message; end
  class ProtoTableDrivenScenario < ::ProtocolBuffers::Message; end
  class ProtoStep < ::ProtocolBuffers::Message; end
  class ProtoConcept < ::ProtocolBuffers::Message; end
  class ProtoTags < ::ProtocolBuffers::Message; end
  class Fragment < ::ProtocolBuffers::Message; end
  class Parameter < ::ProtocolBuffers::Message; end
  class Argument < ::ProtocolBuffers::Message; end
  class ProtoComment < ::ProtocolBuffers::Message; end
  class ProtoTable < ::ProtocolBuffers::Message; end
  class ProtoTableRow < ::ProtocolBuffers::Message; end
  class ProtoStepExecutionResult < ::ProtocolBuffers::Message; end
  class ProtoExecutionResult < ::ProtocolBuffers::Message; end
  class ProtoHookFailure < ::ProtocolBuffers::Message; end
  class ProtoSuiteResult < ::ProtocolBuffers::Message; end
  class ProtoSpecResult < ::ProtocolBuffers::Message; end

  class ProtoSpec < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoSpec"

    required :string, :specHeading, 1
    repeated ::Main::ProtoItem, :items, 2
    required :bool, :isTableDriven, 3
    optional ::Main::ProtoHookFailure, :preHookFailure, 4
    optional ::Main::ProtoHookFailure, :postHookFailure, 5
    required :string, :fileName, 6
    repeated :string, :tags, 7
  end

  class ProtoItem < ::ProtocolBuffers::Message
    # forward declarations

    # enums
    module ItemType
      include ::ProtocolBuffers::Enum

      set_fully_qualified_name "main.ProtoItem.ItemType"

      Step = 1
      Comment = 2
      Concept = 3
      Scenario = 4
      TableDrivenScenario = 5
      Context = 6
      Table = 7
    end

    set_fully_qualified_name "main.ProtoItem"

    required ::Main::ProtoItem::ItemType, :itemType, 1
    optional ::Main::ProtoStep, :step, 2
    optional ::Main::ProtoConcept, :concept, 3
    optional ::Main::ProtoScenario, :scenario, 4
    optional ::Main::ProtoTableDrivenScenario, :tableDrivenScenario, 5
    optional ::Main::ProtoComment, :comment, 6
    optional ::Main::ProtoTable, :table, 7
  end

  class ProtoScenario < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoScenario"

    required :string, :scenarioHeading, 1
    required :bool, :failed, 2
    repeated ::Main::ProtoItem, :scenarioItems, 3
    optional ::Main::ProtoHookFailure, :preHookFailure, 4
    optional ::Main::ProtoHookFailure, :postHookFailure, 5
    repeated :string, :tags, 7
  end

  class ProtoTableDrivenScenario < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoTableDrivenScenario"

    repeated ::Main::ProtoScenario, :scenarios, 1
  end

  class ProtoStep < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoStep"

    required :string, :actualText, 1
    required :string, :parsedText, 2
    repeated ::Main::Fragment, :fragments, 3
    optional ::Main::ProtoStepExecutionResult, :stepExecutionResult, 4
  end

  class ProtoConcept < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoConcept"

    required ::Main::ProtoStep, :conceptStep, 1
    repeated ::Main::ProtoStep, :steps, 2
    required :bool, :failed, 3
    optional ::Main::ProtoStepExecutionResult, :conceptExecutionResult, 4
  end

  class ProtoTags < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoTags"

    repeated :string, :tags, 1
  end

  class Fragment < ::ProtocolBuffers::Message
    # forward declarations

    # enums
    module FragmentType
      include ::ProtocolBuffers::Enum

      set_fully_qualified_name "main.Fragment.FragmentType"

      Text = 1
      Parameter = 2
    end

    set_fully_qualified_name "main.Fragment"

    required ::Main::Fragment::FragmentType, :fragmentType, 1
    optional :string, :text, 2
    optional ::Main::Parameter, :parameter, 3
  end

  class Parameter < ::ProtocolBuffers::Message
    # forward declarations

    # enums
    module ParameterType
      include ::ProtocolBuffers::Enum

      set_fully_qualified_name "main.Parameter.ParameterType"

      Static = 1
      Dynamic = 2
      Special = 3
      Table = 4
    end

    set_fully_qualified_name "main.Parameter"

    required ::Main::Parameter::ParameterType, :parameterType, 1
    optional :string, :value, 2
    optional ::Main::ProtoTable, :table, 3
  end

  class Argument < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.Argument"

    required :string, :type, 1
    optional :string, :value, 2
    optional ::Main::ProtoTable, :table, 3
  end

  class ProtoComment < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoComment"

    required :string, :text, 1
  end

  class ProtoTable < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoTable"

    required ::Main::ProtoTableRow, :headers, 1
    repeated ::Main::ProtoTableRow, :rows, 2
  end

  class ProtoTableRow < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoTableRow"

    repeated :string, :cells, 1
  end

  class ProtoStepExecutionResult < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoStepExecutionResult"

    required ::Main::ProtoExecutionResult, :executionResult, 1
    optional ::Main::ProtoHookFailure, :preHookFailure, 2
    optional ::Main::ProtoHookFailure, :postHookFailure, 3
  end

  class ProtoExecutionResult < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoExecutionResult"

    required :bool, :failed, 1
    optional :bool, :recoverableError, 2
    optional :string, :errorMessage, 3
    optional :string, :stackTrace, 4
    optional :bytes, :screenShot, 5
  end

  class ProtoHookFailure < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoHookFailure"

    required :string, :stackTrace, 1
    required :string, :errorMessage, 2
    optional :bytes, :screenShot, 3
  end

  class ProtoSuiteResult < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoSuiteResult"

    repeated ::Main::ProtoSpecResult, :specResults, 1
    optional ::Main::ProtoHookFailure, :preHookFailure, 2
    optional ::Main::ProtoHookFailure, :postHookFailure, 3
    required :bool, :failed, 4
    required :int32, :specsFailedCount, 5
  end

  class ProtoSpecResult < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ProtoSpecResult"

    required ::Main::ProtoSpec, :protoSpec, 1
    required :int32, :scenarioCount, 2
    required :int32, :scenarioFailedCount, 3
    required :bool, :failed, 4
  end

end
